generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  role          Role      @default(COMPETITOR)
  formInfo      FormInfo?

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Team {
  id         String      @id @default(cuid())
  name       String
  image      String?
  users      User[]
  submission Submission?
}

model Submission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  media       String[] @default([])
  tracks      Track[]  @default([GENERAL])
  public      Boolean  @default(false)
  submitted   Boolean  @default(false)

  teamId String @unique
  team   Team?  @relation(fields: [teamId], references: [id])
}

model FormInfo {
  id         String     @id @default(cuid())
  osis       String
  year       Int
  experience Experience

  userId String @unique
  user   User?  @relation(fields: [userId], references: [id])
}

enum Track {
  GENERAL
  BEGINNER
  SPONSOR_PENDING
}

enum Experience {
  NONE
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Role {
  COMPETITOR
  ADMIN
}
